image: kopaxgroup/node10-jdk8-flyway4-sonarscanner2-docker17-debian

variables:
  GIT_STRATEGY: none

before_script:
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$SSH_PRIVATE_KEY")
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

  # clone
  - "[[ ! -e '.git/config' ]] && git clone ${REPOSITORY_SSH_URL} ."
  - git checkout ${CI_COMMIT_SHA}

  # const
  - export PACKAGE_NAME=$(node -p "require('./package.json').name")
  - export PACKAGE_VERSION=$(node -p "require('./package.json').version")
  - export SONAR_VERSION=${PACKAGE_VERSION}-b${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}
  - export NODE_VERSION=$(node --version)
  - export NPM_VERSION=$(npm --version)

  # logging
  - npm --version
  - node --version
  - npx rollup-umd-scripts --version
  - echo "package version $PACKAGE_VERSION"

  # commit message
  - git config --global user.email "contact@kopaxgroup.com"
  - git config --global user.name "Gitlab-CI"

stages:
  - build
  - test
  - release
  - deploy

# Job: Build
build:
  stage: build
  script:
    - npm install
    - npm run build
  cache:
    key: ${CI_BUILD_REF_NAME}
    paths:
      - node_modules/
  artifacts:
    when: on_success
    name: "${CI_PROJECT_PATH}-${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 1 hour
    paths:
      - .
  only:
    - dev
    - master
  tags:
    - docker


# Job: Test
test:
  stage: test
  coverage: '/All files[^|]*\|\s*[\d.]*\s*\|\s*[\d.]*\s*\|\s*[\d.]*\s*\|\s*([\d.]*)\s*\|\s*/'
  script:
    - npm run test
    - sonar-scanner -Dsonar.host.url=${SONAR_URL} -Dsonar.login=${SONAR_LOGIN} -Dsonar.branch=${CI_COMMIT_REF_NAME} -Dsonar.projectVersion=${SONAR_VERSION}
  dependencies:
    - build
  only:
    - dev
    - master
  tags:

node:8:
  image: node:8
  stage: test
  dependencies:
    - build
  script:
    - npm test
  only:
    - dev
    - master
  tags:
    - docker

node:9:
  image: node:9
  stage: test
  dependencies:
    - build
  script:
    - npm test
  only:
    - dev
    - master
  tags:
    - docker

# Job: Release
release:
  stage: release
  script:
    - npx semantic-release
    # Will push package.json next version if semantic-release do release
    - '[ -z "$(git status --porcelain)" ] || git add package.json package-lock.json'
    - '[ -z "$(git status --porcelain)" ] || git commit -m "chore(release): $(node -p "require(\"./package.json\").version") [skip ci]"'
    - 'git pull origin dev && git push origin HEAD:dev || echo Nothing to release.'
  dependencies:
    - build
  only:
    - master
  tags:
    - docker

# Job declination
declination:
  stage: declination
  script:
    - git fetch --tags && git checkout package-lock.json
    - '[ "$CI_COMMIT_REF_NAME" = "dev" ] && PACKAGE_VERSION=v${PACKAGE_VERSION}'
    - '[ "$CI_COMMIT_REF_NAME" = "master" ] && PACKAGE_VERSION=$(git describe --tags | awk -F "-" "{print $1}")'
    - git checkout refs/tags/${PACKAGE_VERSION}
    - ./node_modules/rollup-umd-scripts/internals/declination/create ${PACKAGE_VERSION}
  dependencies:
    - build
  only:
    - dev
    - master
  tags:
    - docker

# Pages
pages:
  stage: deploy
  script:
    - git fetch --tags
    - PACKAGE_VERSION=$(git describe --tags | awk -F '-' '{print $1}')
    - git checkout refs/tags/${PACKAGE_VERSION}
    - PACKAGE_VERSION=$(node -p "require('./package.json').version")
    - npm install
    # Replace variables
    - npx rollup-umd-scripts doc variable PACKAGE_NAME=${PACKAGE_NAME}
    - npx rollup-umd-scripts doc variable PACKAGE_PEERS="$(npx rollup-umd-scripts peer npm-install-cmd)"
    - npx rollup-umd-scripts doc variable PACKAGE_VERSION=${PACKAGE_VERSION}
    - npx rollup-umd-scripts doc variable NODE_VERSION=${NODE_VERSION}
    - npx rollup-umd-scripts doc variable NPM_VERSION=${NPM_VERSION}
    - npx rollup-umd-scripts doc variable CI_REPOSITORY_URL=${REPOSITORY_SSH_URL}
    - npx rollup-umd-scripts doc variable CI_PROJECT_URL=${CI_PROJECT_URL}
    - npx rollup-umd-scripts doc variable CI_PROJECT_NAMESPACE=${CI_PROJECT_NAMESPACE}
    - npx rollup-umd-scripts doc variable CI_PROJECT_NAME=${CI_PROJECT_NAME}
    - npx rollup-umd-scripts doc variable IMG_SHIELD_PUBLISHING=$(npx rollup-umd-scripts publish status --badge)
    - npm run styleguide:build
  artifacts:
    paths:
    - public
  only:
    - master
  tags:
    - docker
